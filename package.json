{
	"name": "debug",
	"displayName": "Native Debug",
	"description": "GDB, LLDB & Mago-MI Debugger support for VSCode",
	"keywords": [
		"gdb",
		"lldb",
		"mago-mi",
		"native",
		"debug"
	],
	"version": "0.22.0",
	"publisher": "omicronns",
	"icon": "images/icon.png",
	"engines": {
		"vscode": "^1.8.0"
	},
	"main": "./out/src/extension",
	"activationEvents": [
	],
	"categories": [
		"Debuggers"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/omicronns/code-debug.git"
	},
	"contributes": {
		"debuggers": [
			{
				"type": "gdb",
				"extensions": [],
				"program": "./out/src/frontend/gdb.js",
				"runtime": "node",
				"label": "GDB",
				"enableBreakpointsFor": {
					"languageIds": [
						"c",
						"cpp",
						"d",
						"objective-c",
						"fortran",
						"fortran-modern",
						"fortran90",
						"fortran_free-form",
						"fortran_fixed-form",
						"rust",
						"pascal",
						"objectpascal",
						"ada",
						"nim",
						"arm",
						"asm",
						"vala",
						"crystal"
					]
				},
				"configurationAttributes": {
					"launch": {
						"required": [
							"target"
						],
						"properties": {
							"target": {
								"type": "string",
								"description": "Path of executable"
							},
							"arguments": {
								"type": "string",
								"description": "Arguments to append after the executable. You can also use pipes."
							},
							"terminal": {
								"type": "string",
								"description": "Leave this field undefined to keep program output in the vscode console at the bottom. If this is set to empty string the program will spawn in a new console using x-terminal-emulator on linux, otherwise with the specified terminal. On windows setting this to an empty string spawns the program in a console, but no other console is supported."
							},
							"cwd": {
								"type": "string",
								"description": "Path of project"
							},
							"gdbpath": {
								"type": "string",
								"description": "Path to the gdb executable or the command if in PATH",
								"default": "gdb"
							},
							"env": {
								"type": "object",
								"description": "Environment overriding the gdb (and in turn also the process) environment",
								"default": null
							},
							"debugger_args": {
								"type": "array",
								"description": "Additional arguments to pass to GDB",
								"default": []
							},
							"valuesFormatting": {
								"type": "string",
								"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
								"default": "parseText",
								"enum": [
									"disabled",
									"parseText",
									"prettyPrinters"
								]
							},
							"printCalls": {
								"type": "boolean",
								"description": "Prints all GDB calls to the console",
								"default": false
							},
							"showDevDebugOutput": {
								"type": "boolean",
								"description": "Prints all GDB responses to the console",
								"default": false
							},
							"autorun": {
								"type": "array",
								"description": "GDB commands to run when starting to debug",
								"default": []
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"name": "Debug",
						"type": "gdb",
						"request": "launch",
						"target": "./bin/executable",
						"cwd": "${workspaceRoot}",
						"valuesFormatting": "parseText"
					}
				],
				"configurationSnippets": [
					{
						"label": "GDB: Launch Program",
						"description": "Starts the program using gdb",
						"body": {
							"type": "gdb",
							"request": "launch",
							"name": "${2:Launch Program}",
							"target": "${1:./bin/executable}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Attach to PID",
						"description": "Attaches to a running program pid using gdb",
						"body": {
							"type": "gdb",
							"request": "attach",
							"name": "${2:Attach to PID}",
							"target": "${1:[PID]}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Connect to gdbserver",
						"description": "Connects to a gdbserver for debugging",
						"body": {
							"type": "gdb",
							"request": "attach",
							"name": "${3:Attach to gdbserver}",
							"executable": "${1:./bin/executable}",
							"target": ":${2:2345}",
							"remote": true,
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "GDB: Debug external embedded device",
						"description": "Debugs an embedded microcontroller supported by GDB by attaching over extended-remote",
						"body": {
							"type": "gdb",
							"request": "launch",
							"name": "${6:Debug Microcontroller}",
							"target": "extended-remote ${2:/dev/cu.usbmodem00000000}",
							"executable": "${1:./bin/executable.elf}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"autorun": [
								"monitor tpwr enable",
								"monitor swdp_scan",
								"attach 1",
								"load ${1:./bin/executable.elf}"
							]
						},
						"valuesFormatting": "parseText"
					}
				]
			},
			{
				"type": "lldb-mi",
				"extensions": [],
				"program": "./out/src/frontend/lldb.js",
				"runtime": "node",
				"label": "LLDB",
				"enableBreakpointsFor": {
					"languageIds": [
						"c",
						"ada",
						"cpp",
						"cobol",
						"fortran",
						"fortran-modern",
						"fortran90",
						"fortran_free-form",
						"fortran_fixed-form",
						"pascal",
						"modula",
						"java",
						"pli",
						"objective-c",
						"objective-cpp",
						"d",
						"python",
						"opencl",
						"modula3",
						"haskell",
						"ocaml",
						"swift",
						"julia",
						"dylan",
						"mips",
						"renderscript",
						"vala"
					]
				},
				"configurationAttributes": {
					"launch": {
						"required": [
							"target"
						],
						"properties": {
							"target": {
								"type": "string",
								"description": "Path of executable"
							},
							"arguments": {
								"type": "string",
								"description": "Arguments to append after the executable"
							},
							"cwd": {
								"type": "string",
								"description": "Path of project"
							},
							"lldbmipath": {
								"type": "string",
								"description": "Path to the lldb-mi executable or the command if in PATH",
								"default": "lldb-mi"
							},
							"env": {
								"type": "object",
								"description": "Environment overriding the lldb-mi (and in turn also the process) environment",
								"default": null
							},
							"debugger_args": {
								"type": "array",
								"description": "Additional arguments to pass to LLDB",
								"default": []
							},
							"valuesFormatting": {
								"type": "string",
								"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
								"default": "parseText",
								"enum": [
									"disabled",
									"parseText",
									"prettyPrinters"
								]
							},
							"printCalls": {
								"type": "boolean",
								"description": "Prints all lldb calls to the console",
								"default": false
							},
							"showDevDebugOutput": {
								"type": "boolean",
								"description": "Prints all lldb responses to the console",
								"default": false
							},
							"autorun": {
								"type": "array",
								"description": "lldb commands to run when starting to debug",
								"default": []
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"name": "Debug",
						"type": "lldb-mi",
						"request": "launch",
						"target": "./bin/executable",
						"cwd": "${workspaceRoot}",
						"valuesFormatting": "parseText"
					}
				],
				"configurationSnippets": [
					{
						"label": "LLDB: Launch Program",
						"description": "Starts the program using lldb-mi",
						"body": {
							"type": "lldb-mi",
							"request": "launch",
							"name": "${2:Launch Program}",
							"target": "${1:./bin/executable}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "LLDB: Attach to PID",
						"description": "Attaches to a running program pid using lldb-mi",
						"body": {
							"type": "lldb-mi",
							"request": "attach",
							"name": "${2:Attach to PID}",
							"target": "${1:[PID]}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					}
				]
			},
			{
				"type": "mago-mi",
				"extensions": [],
				"program": "./out/src/frontend/mago.js",
				"runtime": "node",
				"label": "Mago-MI",
				"enableBreakpointsFor": {
					"languageIds": [
						"d"
					]
				},
				"configurationAttributes": {
					"launch": {
						"required": [
							"target"
						],
						"properties": {
							"target": {
								"type": "string",
								"description": "Path of executable"
							},
							"arguments": {
								"type": "string",
								"description": "Arguments to append after the executable"
							},
							"cwd": {
								"type": "string",
								"description": "Path of project"
							},
							"magomipath": {
								"type": "string",
								"description": "Path to the mago-mi executable or the command if in PATH",
								"default": "mago-mi"
							},
							"env": {
								"type": "object",
								"description": "Environment overriding the mago-mi (and in turn also the process) environment",
								"default": null
							},
							"debugger_args": {
								"type": "array",
								"description": "Additional arguments to pass to mago",
								"default": []
							},
							"valuesFormatting": {
								"type": "string",
								"description": "Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any",
								"default": "parseText",
								"enum": [
									"disabled",
									"parseText",
									"prettyPrinters"
								]
							},
							"printCalls": {
								"type": "boolean",
								"description": "Prints all mago calls to the console",
								"default": false
							},
							"showDevDebugOutput": {
								"type": "boolean",
								"description": "Prints all mago responses to the console",
								"default": false
							},
							"autorun": {
								"type": "array",
								"description": "mago commands to run when starting to debug",
								"default": []
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"name": "Debug",
						"type": "mago-mi",
						"request": "launch",
						"target": "./bin/executable",
						"cwd": "${workspaceRoot}",
						"valuesFormatting": "parseText"
					}
				],
				"configurationSnippets": [
					{
						"label": "Mago: Launch Program",
						"description": "Starts the program using mago-mi",
						"body": {
							"type": "mago-mi",
							"request": "launch",
							"name": "${2:Launch Program}",
							"target": "${1:./bin/executable}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					},
					{
						"label": "Mago: Attach to PID",
						"description": "Attaches to a running program pid using mago-mi",
						"body": {
							"type": "mago-mi",
							"request": "attach",
							"name": "${2:Attach to PID}",
							"target": "${1:[PID]}",
							"cwd": "^\"\\${workspaceRoot}\"",
							"valuesFormatting": "parseText"
						}
					}
				]
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"test": "npm run compile && node ./node_modules/vscode/bin/test"
	},
	"dependencies": {
		"assert": "^1.4.1",
		"vscode": "^1.1.29",
		"vscode-debugadapter": "^1.16.0"
	},
	"devDependencies": {
		"@types/mocha": "^2.2.39",
		"@types/node": "^7.10.3",
		"mocha": "^5.2.0",
		"tslint": "^5.11.0",
		"tslint-language-service": "^0.9.9",
		"typescript": "^2.1.6"
	}
}
